"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rest_1 = __importDefault(require("@octokit/rest"));
const helper_1 = require("./helper");
const url_join_1 = __importDefault(require("url-join"));
const GithubUrl = 'https://api.github.com';
const GiteeUrl = 'https://gitee.com/api/v5';
class Octo {
    constructor({ repo, branch, path = '', token, customUrl = '', origin = 'github' }) {
        this.owner = '';
        this.repo = '';
        this.branch = '';
        this.path = '';
        this.token = '';
        this.customUrl = '';
        this.octokit = null;
        const [owner, r] = repo.split('/');
        if (!r)
            throw new Error('Error in repo name');
        this.owner = owner;
        this.repo = r;
        this.branch = branch || 'master';
        this.path = path;
        this.token = token;
        this.customUrl = customUrl;
        this.origin = origin;
        this.octokit = new rest_1.default({
            baseUrl: origin === 'github' ? GithubUrl : GiteeUrl,
            auth: token ? `token ${token}` : undefined
        });
    }
    get isGithub() {
        return this.origin === 'github';
    }
    async getTree(sha) {
        const { owner, repo } = this;
        const d = await this.octokit.git.getTree({
            owner,
            repo,
            tree_sha: sha
        });
        const { tree } = d.data;
        return tree;
    }
    async getPathTree() {
        const { path } = this;
        let tree = await this.getTree(this.branch);
        const arr = path.split('/').filter(each => each);
        let sha = this.branch;
        for (let i = 0; i < arr.length; i++) {
            const item = tree.filter(each => arr[i].endsWith(each.path))[0];
            if (!item)
                return Promise.reject(new Error(`Can\'t find ${path}`));
            sha = item.sha;
            tree = await this.getTree(sha);
        }
        return { sha, tree };
    }
    createFile(params) {
        const { isGithub } = this;
        const request = this.octokit.request(`/repos/:owner/:repo/contents/:path`, Object.assign({ method: isGithub ? 'PUT' : 'POST' }, params));
        return request;
    }
    async getDataJson() {
        const { owner, repo } = this;
        const defaultRet = {
            lastSync: '',
            data: []
        };
        const { tree } = await this.getPathTree();
        const dataJson = tree.filter(each => each.path === 'data.json')[0];
        if (dataJson) {
            let content = await this.octokit.git.getBlob({
                owner,
                repo,
                file_sha: dataJson.sha
            });
            const buf = Buffer.from(content.data.content, content.data.encoding);
            const json = JSON.parse(buf.toString());
            return Object.assign({}, defaultRet, json, { sha: dataJson.sha });
        }
        return defaultRet;
    }
    updateDataJson({ data, sha }) {
        const { owner, repo, branch, path } = this;
        return this.octokit.repos.updateFile({
            owner,
            branch,
            repo,
            path: helper_1.pathJoin(path, 'data.json'),
            sha,
            message: `Sync dataJson by PicGo at ${helper_1.getNow()}`,
            content: Buffer.from(JSON.stringify(data)).toString('base64')
        });
    }
    createDataJson(data) {
        const { owner, repo, branch, path } = this;
        return this.createFile({
            owner,
            repo,
            branch,
            path: helper_1.pathJoin(path, 'data.json'),
            message: `Sync dataJson by PicGo at ${helper_1.getNow()}`,
            content: Buffer.from(JSON.stringify(data)).toString('base64')
        });
    }
    async upload(img) {
        /* istanbul ignore next */
        const { owner, repo, branch, path = '' } = this;
        const { fileName } = img;
        const d = await this.createFile({
            owner,
            repo,
            path: helper_1.pathJoin(path, fileName),
            message: `Upload ${fileName} by picGo - ${helper_1.getNow()}`,
            content: img.base64Image || Buffer.from(img.buffer).toString('base64'),
            branch
        });
        if (d) {
            return {
                imgUrl: this.parseUrl(fileName),
                sha: d.data.content.sha
            };
        }
        /* istanbul ignore next */
        throw d;
    }
    removeFile(img) {
        const { repo, path, owner, branch } = this;
        return this.octokit.repos.deleteFile({
            repo,
            owner,
            branch,
            path: url_join_1.default(path, img.fileName),
            message: `Deleted ${img.fileName} by PicGo - ${helper_1.getNow()}`,
            sha: img.sha
        });
    }
    parseUrl(fileName) {
        const { origin, owner, repo, path, customUrl, branch } = this;
        if (customUrl) {
            return url_join_1.default(customUrl, path, fileName);
        }
        return origin === 'github' ? url_join_1.default(`https://raw.githubusercontent.com/`, owner, repo, branch, path, fileName) : url_join_1.default(`https://gitee.com`, owner, repo, 'raw', branch, path, fileName);
        // https://gitee.com/zwing/test/raw/master/57566062-a7752000-73fa-11e9-99c1-e3a0562bc41d.png
    }
}
exports.Octo = Octo;
let ins = null;
let _cacheOption = '';
function getIns(config) {
    const str = JSON.stringify(config);
    if (ins && _cacheOption === str)
        return ins;
    _cacheOption = str;
    ins = new Octo(config);
    return ins;
}
exports.getIns = getIns;
/* istanbul ignore next */
function clearIns() {
    // just for test
    ins = null;
}
exports.clearIns = clearIns;
